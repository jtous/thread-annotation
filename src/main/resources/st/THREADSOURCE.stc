template st.THREADSOURCE : st.interfaces.IDL2C{
  $${

/**
 * Copyright (C) 2014 Schneider-Electric
 *
 * This file is part of "Mind Compiler" is free software: you can redistribute 
 * it and/or modify it under the terms of the GNU Lesser General Public License 
 * as published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: mind@ow2.org
 *
 * Authors: Julien Tous
 * Contributors: 
 */

isClient ::= [ "client" : "true" ]
isServer ::= [ "server" : "true" ]

InterceptedServerDefinition(component, interfaces) ::= <<

#include \<pthread.h\>
#include \<signal.h\>

#define nextStartIndex() ((PRIVATE.mBuf.start + 1) % PRIVATE.mBuf.size)
#define nextEndIndex() ((PRIVATE.mBuf.end + 1) % PRIVATE.mBuf.size)
#define isBufferEmpty() (PRIVATE.mBuf.end == PRIVATE.mBuf.start)
#define isBufferFull() (nextEndIndex() == PRIVATE.mBuf.start)
#define bufferWrite(ELEM) \
		PRIVATE.mBuf.buf[PRIVATE.mBuf.end] = ELEM; \
		PRIVATE.mBuf.end = (PRIVATE.mBuf.end + 1) % PRIVATE.mBuf.size; \
		if (isBufferEmpty()) { \
			PRIVATE.mBuf.start = nextStartIndex(); \
		}
#define bufferRead(ELEM) \
		ELEM = PRIVATE.mBuf.buf[PRIVATE.mBuf.start]; \
		PRIVATE.mBuf.start = nextStartIndex();

<interfaces.keys:{k|<interfaces.(k).methods:{<InterceptorServerMethod(component=component,interfaceDefinition=interfaces.(k), srvName=k, method=it)>};separator="\n\n">};separator="\n\n">

<interfaces.keys:{k|<interfaces.(k).methods:{<AsyncInterceptorServerMethod(component=component,interfaceDefinition=interfaces.(k), srvName=k, method=it)>};separator="\n\n">};separator="\n\n">

<InterceptorClientExecution(component=component, interfaces=interfaces)>

CONSTRUCTOR() {
	PRIVATE.mBuf.size = BUFFER_SIZE +1;
	PRIVATE.mBuf.start = 0;
	PRIVATE.mBuf.end = 0;

	pthread_create(&(PRIVATE.thread), NULL, loop, _mind_this);
	pthread_mutex_init(&(PRIVATE.pendingEventMutex), NULL);
	pthread_mutex_init(&(PRIVATE.clientMutex), NULL);
	pthread_mutex_init(&(PRIVATE.accessMutex), NULL);
	pthread_mutex_lock(&(PRIVATE.clientMutex));
	pthread_mutex_lock(&(PRIVATE.pendingEventMutex));
}

>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------

InterceptorServerMethod(component,interfaceDefinition, srvName, method) ::= <<
<if(method.vaArgs)>
<mindMethDef(itfName=srvName, method=method)> {
#error va_args not supported on asynchronous call.
<else>
<mindMethDef(itfName=srvName, method=method)> {
   	<component.name;format="pathToCName">_marchaled_t tmp;
	if (!isBufferFull()){
		tmp.meth = <srvName>_<method.name>;
		bufferWrite(tmp);
	}
	<method.parameters:paramToBuff(itfName=srvName,method=method, param=it);separator="\n">
	pthread_mutex_unlock(&(PRIVATE.pendingEventMutex));
	pthread_mutex_lock(&(PRIVATE.clientMutex));
	return;    
<endif>

}
>>

AsyncInterceptorServerMethod(component,interfaceDefinition, srvName, method) ::= <<
<if(method.vaArgs)>
<mindMethDef(itfName={<srvName>_async}, method=method)> {
#error va_args not supported on asynchronous call.
<else>
<mindMethDef(itfName={<srvName>_async}, method=method)> {
   	<component.name;format="pathToCName">_marchaled_t tmp;
	if (!isBufferFull()){
		tmp.meth = <srvName>_async_<method.name>;
		bufferWrite(tmp);
	}
	<method.parameters:paramToBuff(itfName=srvName,method=method, param=it);separator="\n">
	pthread_mutex_unlock(&(PRIVATE.pendingEventMutex));
	return;    
<endif>

}
>>

//<methCall(itfName=cltName,method=method)>;
InterceptorClientExecution( component, interfaces) ::= <<

static void * loop(void* this) {
	<component.name;format="pathToCName">_marchaled_t tmp[20];
	PRIVATE_DATA_T* _mind_this = this;
	
	sigset_t set;
	sigfillset(&set);
    pthread_sigmask(SIG_SETMASK, &set, NULL);
	
	while(1) {
		pthread_mutex_lock(&(PRIVATE.pendingEventMutex));
		if (!isBufferEmpty()) {
			bufferRead(tmp[0]);
			switch (tmp[0].meth) {
			<interfaces.keys:{k|<interfaces.(k).methods:{<buffToCall(itfName=k,method=it)>};separator="\n">};separator="\n">
			<interfaces.keys:{k|<interfaces.(k).methods:{<buffToAsyncCall(itfName=k,method=it)>};separator="\n">};separator="\n">
			default:
				break;
			}
		}
	}
	return NULL;
}
>>

buffToCall(itfName,method) ::= <<
case <itfName>_<method.name>:
	<paramsRead(method=method)>;					
	<if(!(isVoidMethod(method=method)))>tmp[0].<itfName>_<method.name>_return = <endif>CALL(<itfName>_threaded,<method.name>)(<paramList(itfName=itfName,method=method)>);
	pthread_mutex_unlock(&(PRIVATE.clientMutex));
	break;
>>

buffToAsyncCall(itfName,method) ::= <<
case <itfName>_async_<method.name>:
	<paramsRead(method=method)>;					
	CALL(<itfName>_threaded,<method.name>)(<paramList(itfName=itfName,method=method)>);
	break;
>>

paramsRead(method) ::= <<
<method.parameters:{if (!isBufferEmpty()) { bufferRead(tmp[<i>]); } else { break; } };separator="\n">
>>
paramList(itfName, method) ::= <<
<method.parameters:{tmp[<i>].<itfName>_<method.name>_<parameterName(it)>}; separator=", ">
>>

paramToBuff(itfName,method,param) ::= <<
if (!isBufferFull()){
	tmp.<itfName>_<method.name>_<parameterName(param)> = <parameterName(param)>;
	bufferWrite(tmp);
}
>>

dualMethPrototype(name, parameters) ::= <<
<name>(<parameters:parameterDef(parameter=it); separator=", ">, va_list param_list)
>>

ServerInterfacesWrapper(definition, interfaceDefinitions, itf) ::= <<
<if (isServer.(itf.role))>
<if (itf.numberOfElement)>
//FIXME collection interface
//<itf.astDecorations.("collectionIndexes"):CollectionServerMethodsWrapper(definition=definition, interfaceDefinitions=interfaceDefinitions, itf=itf, index=it);separator="\n">
<else>
<interfaceDefinitions.(itf.signature).methods:ServerMethodsWrapper(definition=definition, itf=itf, method=it)>
<endif>
<endif>
>>

mindMethDef(itfName, method) ::= <<
<typeQualifier(qualifiers=method)><varDef(type=method.type, name=mindMethodSignature(itfName = itfName, method=method))>
>>

mindMethodSignature(itfName, method) ::= <<
METH(<itfName>, <method.name>)(<if(method.parameters)>
<method.parameters:parameterDef(parameter=it); separator=", "><if (method.vaArgs)>, ...<endif>
<else>
void
<endif>)
>>


methCall(itfName,method) ::= <<
CALL(<itfName>,<method.name>)(<method.parameters:parameterName(parameter=it); separator=", ">)
>>


  }$$
}
  